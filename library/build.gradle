apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.novoda.bintray-release'
apply plugin: 'com.novoda.build-properties'


buildProperties {
    cli {
        using(project)
    }

    bintray {
        def bintrayCredentials = {
            return isDryRun() ?
                    ['bintrayOrg': 'n/a', 'bintrayRepo': 'n/a', 'bintrayUser': 'n/a', 'bintrayKey': 'n/a'] :
                    new File("${System.getenv('BINTRAY_PROPERTIES')}")
        }
        using(bintrayCredentials()).or(cli)
        description = '''This should contain the following properties:
                        - bintrayOrg: name of the Bintray organisation to deploy the artifacts to
                        - bintrayRepo: name of the repo of the organisation to deploy the artifacts to
                        - bintrayUser: name of the account used to deploy the artifacts
                        - bintrayKey: API key of the account used to deploy the artifacts'''
                .stripIndent()
    }
}

group 'com.novoda'
version = '0.0.1'

publish {
    groupId = group
    artifactId = 'aws-v4-signer'
    publishVersion = project.version
    website = 'https://github.com/novoda/aws-v4-signer-java'
    desc = 'Kotlin Multiplatform AWS V4 Signer'

    userOrg = project.buildProperties.bintray['bintrayOrg'].string
    repoName = project.buildProperties.bintray['bintrayRepo'].string
    bintrayUser = project.buildProperties.bintray['bintrayUser'].string
    bintrayKey = project.buildProperties.bintray['bintrayKey'].string
}

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        // This preset is for iPhone emulator
        // Switch here to presets.iosArm64 to build library for iPhone device
        fromPreset(presets.iosX64, 'iOS') {
            compilations.main.outputKinds('FRAMEWORK')
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'

                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-json:$ktor_version"
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'

                api "io.ktor:ktor-client-core-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        iOSMain {
            dependencies {
                implementation "io.ktor:ktor-client-ios:$ktor_version"
                implementation "io.ktor:ktor-client-core-native:$ktor_version"
                implementation "io.ktor:ktor-client-json-native:$ktor_version"
            }
        }
    }
    task packForXCode(type: Sync) {
        final File frameworkDir = new File(buildDir, "xcode-frameworks")
        final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'

        inputs.property "mode", mode
        dependsOn kotlin.targets.iOS.compilations.main.linkTaskName("FRAMEWORK", mode)

        from { kotlin.targets.iOS.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
        into frameworkDir

        doLast {
            new File(frameworkDir, 'gradlew').with {
                text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
                setExecutable(true)
            }
        }
    }
    tasks.build.dependsOn packForXCode
}

configurations {
    compileClasspath
}

boolean isDryRun() {
    buildProperties.cli['dryRun'].or(true).boolean
}
